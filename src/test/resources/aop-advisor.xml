<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="caddierTarget" class="com.chenjj.spring.core.aop.advisor.Caddier"/>
    <bean id="sellerTarget" class="com.chenjj.spring.core.aop.advisor.Seller"/>
    <bean id="waiterTarget" class="com.chenjj.spring.core.aop.NavieWaiter"/>
    <bean id="greetingBeforeAdvice" class="com.chenjj.spring.core.aop.GreetingBeforeAdvice"/>
    <!-- advice-ref向切面注入一个前置增强,还有classFilter属性（我们定义在GreetingAdvisor里了）,order属性（切面织入时的顺序，
    用于定义Ordered接口表示的顺序） -->
    <!--<bean id="greetingAdvisor" class="com.chenjj.spring.core.aop.advisor.GreetingStaticMethodAdvisor"
          p:advice-ref="greetingBeforeAdvice"/>-->

    <!-- 匹配模式串匹配的是目标类方法的全限定名，即带有类名的方法名,所以这里只有Caddier的serverTo方法被匹配
     patterns用于定义多个匹配模式串，这些匹配模式串之间是"或"的关系,如果只是一个，可以使用pattern属性
     RegexBuddy是强大的正则表达式编辑工具-->
    <!--<bean id="regexpAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
          p:advice-ref="greetingBeforeAdvice">
        <property name="patterns">
            <list>
                <value>.*server.*</value>
            </list>
        </property>
    </bean>-->

    <bean id="dynamicAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="pointcut">
            <bean class="com.chenjj.spring.core.aop.advisor.GreetingDynamicMethodAdvisor"/>
        </property>
        <property name="advice">
            <bean class="com.chenjj.spring.core.aop.GreetingBeforeAdvice"/>
        </property>
    </bean>

    <!-- 定义流程切点,指定一个类和某一个方法作为流程切点 -->
    <bean id="controlFlowPointcut" class="org.springframework.aop.support.ControlFlowPointcut">
        <constructor-arg type="java.lang.Class" value="com.chenjj.spring.core.aop.advisor.WaiterDelegate"/>
        <constructor-arg type="java.lang.String" value="service"/>
    </bean>
    <!-- 流程切面,代理对象在每次调用目标类方法时，都需要判断方法调用堆栈中是否满足流程切点要求的方法，所以对性能影响大 -->
    <bean id="controlFlowAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor"
          p:pointcut-ref="controlFlowPointcut"
          p:advice-ref="greetingBeforeAdvice"/>

    <bean id="greetingComposablePointcut" class="com.chenjj.spring.core.aop.advisor.GreetingComposablePointcut"/>

    <!-- 下面不能用p:pointcut-ref，因为没有这样的Bean存在，下面只是通过调用intersectionPointcut方法返回对象-->
    <bean id="composableAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor"
          p:pointcut="#{greetingComposablePointcut.intersectionPointcut}"
          p:advice-ref="greetingBeforeAdvice"/>

    <bean id="introductionAdvisor" class="org.springframework.aop.support.DefaultIntroductionAdvisor">
        <constructor-arg>
            <bean class="com.chenjj.spring.core.aop.ControllablePerformanceMonitor"/>
        </constructor-arg>
    </bean>

    <!--<bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="greetingAdvisor"
          p:proxyTargetClass="true"/>-->
    <!--<bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="regexpAdvisor"
          p:proxyTargetClass="true"/>-->
    <bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="dynamicAdvisor"
          p:proxyTargetClass="true"/>
    <bean id="caddier" parent="parent" p:target-ref="caddierTarget"/>
    <bean id="seller" parent="parent" p:target-ref="sellerTarget"/>

    <bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="controlFlowAdvisor"
          p:target-ref="waiterTarget"
          p:proxyTargetClass="true"/>

    <bean id="waiter1" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="composableAdvisor"
          p:target-ref="waiterTarget"
          p:proxyTargetClass="true"/>

    <bean id="forumServiceTarget" class="com.chenjj.spring.core.proxy.ForumServiceImpl"/>
    <bean id="forumService" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="introductionAdvisor"
          p:target-ref="forumServiceTarget"
          p:proxyTargetClass="true"/>
</beans>